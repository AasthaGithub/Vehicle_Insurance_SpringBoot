CREATE QUERIES & CONSTRAINTS:

…  Table Space Creation 

Permanent table- Table space created

CREATE BIGFILE TABLESPACE tbs_perm_03
  DATAFILE 'tbs_perm_03.dat'
    SIZE 10M
    AUTOEXTEND ON;
-----------------------------------------------------------
TEMPORARY TABLESPACE

CREATE TEMPORARY TABLESPACE tbs_temp_01
  TEMPFILE 'tbs_temp_01.dbf'
    SIZE 5M
    AUTOEXTEND ON;
---------------------------------------------------------------------
User and password

CREATE USER Joker
  IDENTIFIED BY Joker12345
  DEFAULT TABLESPACE tbs_perm_03
  TEMPORARY TABLESPACE tbs_temp_01
  QUOTA 20M on tbs_perm_03;
---------------------------------------------------------------------------------
. Users table 
 -- (under table space User joker)

CREATE TABLE joker.users(
User_Id NUMBER GENERATED ALWAYS AS IDENTITY,
UserName VARCHAR2(50) NOT NULL,
Email VARCHAR2(50) ,
DOB DATE NOT NULL,
Mobile_Num NUMBER,
Address VARCHAR2(200) ,
Password VARCHAR(200),
PRIMARY KEY(User_Id)
);

ALTER TABLE joker.users ADD CONSTRAINT C_Mobile_check CHECK(LENGTH(Mobile_Num)=10);

ALTER TABLE joker.users ADD CONSTRAINT C_email_check CHECK(REGEXP_LIKE(Email,'^[A-Za-z0-9._-]+@[A-Za-z0-9._-]+\.[A-Za-z]{2,4}$'));
------------------------------------------------------------------
INSERT INTO joker.Users (UserName, Email, DOB, Mobile_Num, Address, Password) VALUES ('Billie Ellish', 'billie@musicmail.com', TO_DATE('2008/05/03', 'YYYY-MM-DD'), 9876543210, 'NYC, USA', 'billiepass');

---------------------------------------------------------------------
-- REGEX CHECK won’t allow invalid mails like ‘a.s.@j@2.com’ or ‘a@gmail.c’
-- GENERATED ALWAYS AS IDENTITY: doesn’t allow user to enter User_Id
-- GENERATED BY DEFAULT AS IDENTITY : by_default auto generates else allows user to enter field values
-- GENERATED BY DEFAULT AS IDENTITY START WITH 10;
-- Date insertion reference

-------------------------------------------------------------------------------------------    

. Plans table

CREATE TABLE joker.Plans(
Plan_Id NUMBER,	
Amount NUMBER,
Vechile_Type VARCHAR2(100) NOT NULL,
Plan_Type VARCHAR2(100),
PRIMARY KEY(Plan_Id));

---------------------------------------------------------------------------------
ALTER TABLE joker.Plans
ADD CONSTRAINT Plans_Primary PRIMARY KEY(Plan_Id);

(Just to show how to add constraint if missed)
-------------------------------------------------------------------------------------

. Vehicles Table 

CREATE TABLE joker.Vehicles(
Vehicle_Reg_Num VARCHAR2(100),
User_Id NUMBER NOT NULL,
Model VARCHAR2(100)NOT NULL,
Vechile_Type_V VARCHAR2(100) CHECK (Vechile_Type_V IN ('2W','4W')),
Manufacturer VARCHAR2(100),
Driving_License VARCHAR2(100) NOT NULL,
Purchase_Date DATE,
Engine_Num VARCHAR2(100),
Chasis_Num VARCHAR2(100),
CONSTRAINT FK_User_VPT FOREIGN KEY (User_Id) REFERENCES joker.users(User_Id),
PRIMARY KEY (Vehicle_Reg_Num ));

CONSTRAINT C_Vehicle_Reg_Num_len CHECK (len(Vehicle_Reg_Num_len)=10)

-------------------------------------------------------------------------------------------------------------------------------

-- Tasks: To FIND actual/real world Vehicle_Reg_Num Length, Driving_License Length & in front end allow purchase date before current date only
-- To find an Oracle way of On Update cascade -- i.e. used to change Plan_Id in Policies table if Plan_Id in original Plans Table is changed.

-------------------------------------------------------------------------------------------------------------------------------
.  Policies  table

CREATE TABLE joker.Policies(
Policy_Num VARCHAR2(100) NOT NULL,
Vehicle_Reg_Num VARCHAR2(100) NOT NULL,
User_Id NUMBER,
Plan_Id NUMBER , 
Period NUMBER ,
Start_Date DATE,
End_Date DATE,
PRIMARY KEY(Policy_Num),
CONSTRAINT FK_User_PT FOREIGN KEY (User_Id) REFERENCES joker.users(User_Id),
CONSTRAINT FK_Plan_PT FOREIGN KEY (Plan_Id) REFERENCES joker.Plans(Plan_Id),
CONSTRAINT FK_Vehicle_PT FOREIGN KEY (Vehicle_Reg_Num) REFERENCES Vehicles(Vehicle_Reg_Num) ON DELETE CASCADE
);

------------------------------------------------------------------
(Here On Delete Cascade would delete a Policy if corresponding vehicle entry is deleted)
In non- Oracle Type DB
-- CONSTRAINT FK_Plan_PT FOREIGN KEY (Plan_Id) REFERENCES joker.Plans(Plan_Id)) ON UPDATE CASCADE;
(Here On Update Cascade would update a Plan_ID in ‘Policies_Taken’ table if original plan_id is update, i.e. in Referenced Table ‘Plans’ )

---------------------------------------------------------------------------------------------------------------------------

. Claims Table 

CREATE TABLE joker.Claims(
Request_Num VARCHAR2(100) NOT NULL,
Claim_Date DATE,
Policy_Num VARCHAR2(100),
Approval_Status  VARCHAR2(50),
Request_Amount NUMBER,
Approval_Amount NUMBER,
Reason VARCHAR2(200),
PRIMARY KEY(Request_Num),
CONSTRAINT FK_Policy_Claim FOREIGN KEY (Policy_Num) REFERENCES joker.Policies(Policy_Num)ON DELETE CASCADE);
-------------------------------------------------------------------------------------------------------

Adding Referential Integrity Constraints

-- Added in Create Queries itself

If anyone at all has access to the database via ODBC, Excel, SQLPlus, PERL, or any other tool, and can possibly bypass the application - thus, RI really becomes important.
The INSERT rule indicates what will happen if you attempt to insert a value into a foreign key column without a corresponding primary key value in the parent table. 
 The UPDATE rule controls data modification such that a foreign key value cannot be updated to a value that does not correspond to a primary key value in the parent table.
- Restricted Update: The modification of the primary key column(s) is not allowed if foreign key values exist; 
- Neutralizing Update: All foreign key values equal to the primary key value(s) being modified are set to null. 
- Cascading Update: All foreign key columns with a value equal to the primary key value(s) being modified are modified as well.
DELETE rules define what happens when an attempt is made to delete a row from the parent table.

https://stackoverflow.com/questions/22881022/sql-on-delete-cascade-and-on-update-cascade 
 https://docs.oracle.com/cd/B28359_01/server.111/b28286/clauses002.htm#CJAIHHGC 

ALTER TABLE tb_name ADD CONSTRAINT constraint_name
UNIQUE (column_names); -- or any condition

// Use DISABLE VALIDATE or ENABLE NOVALIDATE to temporarily pause the checking;

-------------------------------------------------------------------------------------------------------------------------------
To check all Constraints on a Table:
select CONSTRAINT_NAME C_NAME, INDEX_NAME, CONSTRAINT_TYPE, Search_condition, R_CONSTRAINT_NAME R_NAME from user_constraints where TABLE_NAME='POLICIES_TAKEN';

-- Various constraint types: P= Primary Key, U= Unique, R= Referential Integrity Constraint
------------------------------------------------------------------------------------------------------------------------------

DATA_TESTING:


INSERT QUERIES :

User Table : 

INSERT INTO joker.Users (UserName, Email, DOB, Mobile_Num, Address, Password) VALUES ('Billie Ellish', 'billie@musicmail.com', TO_DATE('2008/05/03', 'YYYY-MM-DD'), 9876543210, 'NYC,USA', 'billiepass' );

INSERT INTO joker.Users (UserName, Email, DOB, Mobile_Num, Address, Password) VALUES ('Eric Ronalds', 'eric@hmail.com', TO_DATE('1995/08/12', 'YYYY-MM-DD'), 9867453201, 'Delhi,India', 'Eric12' );


//for those who have oracle 10G
INSERT INTO joker.Users VALUES (101,'Billie Ellish', 'billie@musicmail.com', TO_DATE('2008/05/03', 'YYYY-MM-DD'), 9876543210, 'NYC,USA', 'billiepass' );

INSERT INTO joker.Users VALUES (102,'Eric Ronalds', 'eric@hmail.com', TO_DATE('1995/08/12', 'YYYY-MM-DD'), 9867453201, 'Delhi,India', 'Eric12' );

------------------------------------------------------------------------------------------------------------

Plans Table :

INSERT INTO joker.Plans VALUES (2001,7000,’4W’,’Comprehensive’);

INSERT INTO joker.Plans VALUES (2002,4000,’4W’,’Third Party’);

INSERT INTO joker.Plans VALUES (2003,3000,’2W’,’Comprehensive’);

INSERT INTO joker.Plans VALUES (2004,1000,’2W’,’Third Party’);

------------------------------------------------------------------------------------------------------------

Vehicles Table :

//vehicle registration number is of len  = 10
//driving license len = 16
//engine number len = 12
//chasis num len = 17

Insert into Vehicles VALUES ('MH05BA4289',101,'Grand i10','4W','Honda','MH05 20063017124',TO_DATE('2020/08/12', 'YYYY-MM-DD'),'JC44E1357121','M23LPK7Y9M2341674');

Insert into Vehicles VALUES ('MH05JK7519',101,'Activa 3G','2W','Honda','MH05 20054217760',TO_DATE('2020/04/02', 'YYYY-MM-DD'),'JC44B8557110','M20DPB7K9N2417604');

Insert into Vehicles VALUES ('GJ02EW0509',102,'Activa','2W','Honda','GJ02 10051019961',TO_DATE('2020/11/25', 'YYYY-MM-DD'),'AD44X5852104','N08CXB5KN72441209');

------------------------------------------------------------------------------------------------------------

Policies Table :

Insert into Policies VALUES ('TKT01','MH05BA4289',101,2001,1,TO_DATE('2020/08/12', 'YYYY-MM-DD'),TO_DATE('2021/08/12', 'YYYY-MM-DD'));

Insert into Policies VALUES ('TKT02','GJ02EW0509',102,2004,2,TO_DATE('2020/11/25', 'YYYY-MM-DD'),TO_DATE('2021/11/25', 'YYYY-MM-DD'));

------------------------------------------------------------------------------------------------------------

Claims Table :

Insert into Claims VALUES ('REQ01',TO_DATE('2020/11/20', 'YYYY-MM-DD'),'TKT01','YES',5000,3500,'Theft');
